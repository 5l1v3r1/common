#!/bin/bash -e
#
# zz-security
#
# This script is meant to provide a central place for managing
# and applying security configurations. Currently only SSL/TLS
# applications are included here, but in the future other protocols
# such as ssh may be added.

set ${CERTFILE:="/etc/ssl/private/cert.pem"}
set ${CRTFILE:="/usr/local/share/ca-certificates/cert.crt"}
set ${KEYFILE:="/etc/ssl/private/cert.key"}
set ${DHPARAMS:="/etc/ssl/private/dhparams.pem"}

# Secure Cipher List recommended Ivan Ristic in Bulletproof SSL and TLS
SECURE_CIPHER_LIST="ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256"

# Tomcat-suitable cipher list (uses RFC cipher suite names instead of OpenSSL)
RFC_CIPHER_LIST="TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256"

# Compatible Cipher List recommended for older clients - reduced security score
COMPATIBLE_CIPHER_LIST="ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA"

fatal() {
    echo "fatal: $@" 1>&2
    exit 1
}

remove_ssl_params() {
  # Remove extra ssl params from .conf files
  CONF="$1"
  SSL_PARAMS="$2"

  if [ -f $CONF ]; then
    for p in $SSL_PARAMS; do
      sed -i "/^\s*$p/ d" $CONF
    done
  fi
}

# TODO: modify set_option and set_param to handle quoted values and
#       leading white space (indents).

set_option() {
# syntax: set_option option value label
# 
# requires the following variables to be set before call
#   $CONF   - the config file to be processed
#   $COM    - the comment delimiter e.g. ';' or '#'
#   $SEP    - the value separator e.g. '=' or ' '
#   $NEXT   - line number to add new option

  # check if option value is already set
  if [[ $(grep -c "^\s*$1\s*$SEP\s*$2" $CONF) = 0 ]]; then  # not found
    # check if option value is commented
    if [[ $(grep -c "^\s*$COM\s*$1\s*$SEP\s*$2" $CONF) > 0 ]]; then
      # remove the comment
      sed -i "s|^\s*$COM\(\s*$1\s*$SEP\s*$2.*$\)|\1|" $CONF
    else
      # append the label and option value
      if [[ "$3" != "" ]]; then
        sed -i "$NEXT a \\\n$COM $3" $CONF; ((NEXT+=2));
      fi
      sed -i "$NEXT a $1 $SEP $2" $CONF; ((NEXT+=1));
    fi
  fi
}

set_param() {
# syntax: set_param param value label
# 
# requires the following variables to be set before call
#   $CONF   - the config file to be processed
#   $COM    - the comment delimiter e.g. ';' or '#'
#   $SEP    - the value separator e.g. '=' or ' '
#   $NEXT   - line number to add new param

  # check if param is already set (any value)
  if [[ $(grep -c "^\s*$1\s*$SEP\s*" $CONF) = 0 ]]; then  # not found
    # check if param is commented
    if [[ $(grep -c "^\s*$COM\s*$1\s*$SEP\s*" $CONF) > 0 ]]; then
      # remove the first comment
      sed -i "s|^\s*$COM\(\s*$1\s*$SEP\s*.*$\)|\1|" $CONF
    else
      # append the label and option value
      if [[ "$3" != "" ]]; then
        sed -i "$NEXT a \\\n$COM $3" $CONF; ((NEXT+=2));
      fi
      sed -i "$NEXT a $1 $SEP $2" $CONF; ((NEXT+=1));
    fi
  fi
  # replace all param value pairs while preserving comments
  sed -i "s|^\(\s*$1\s*$SEP\s*\)\S*|\1$2|" $CONF
}

# Configure Apache security
# apache2 (virtualhosts need to be configured to enable SSL/TLS)
# TODO: use set_param and set_option to manage params and options

# Is Apache installed?
if [ -f "/etc/apache2/apache2.conf" ]; then

  CONF="/etc/apache2/mods-available/ssl.conf"
  if [ -f $CONF ]; then
    # Replace SSLCipherSuite
    sed -i "s|^\(\s*SSLCipherSuite\s\+\).*$|\1${SECURE_CIPHER_LIST}|g" $CONF    

  else
    fatal "No ssl.conf available"	# Bailout without changing anything
  fi

  a2enmod ssl
  a2enconf security

fi

# Configure nginx security
CONF="/etc/nginx/include/ssl"
if [ -f "$CONF" ]; then
    sed -i "s|ssl_ciphers '.*|ssl_ciphers '${SECURE_CIPHER_LIST}';|" $CONF
fi

# Secure lighttpd
CONF="/etc/lighttpd/ssl-params.conf"
if [ -f $CONF ]; then
    sed -i "s|^\(\s*ssl.cipher-list\s*=\s*\).*$|\1\"$SECURE_CIPHER_LIST\"|g" $CONF    
    lighty-enable-mod ssl
fi

# Configure Tomcat security
CONF="/etc/tomcat7/server.xml"
if [ -f $CONF ]; then
    sed -i "s|ciphers=|ciphers=\"${RFC_CIPHER_LIST}\"|" $CONF
fi

# Secure stunnel
CONF="/etc/stunnel/stunnel.conf"
if [ -f "$CONF" ]; then
    sed -i "s|ciphers=.*|ciphers=$SECURE_CIPHER_LIST\n|" $CONF
fi

# Secure webmin
if [ -d "/etc/webmin" ]; then
  # patch webmin - set cookie httpOnly
  CGI=/usr/share/webmin/session_login.cgi
  if [ -f $CGI ]; then
    sed -i "/Set-Cookie/ s/sec/sec; httpOnly/g" $CGI
  fi
fi

