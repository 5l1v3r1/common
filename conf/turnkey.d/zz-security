#!/bin/bash -e

set ${CERTFILE:="/etc/ssl/certs/cert.pem"}
set ${CRTFILE:="/usr/local/share/ca-certificates/cert.crt"}
set ${KEYFILE:="/etc/ssl/private/cert.key"}
set ${DHPARAMS:="/etc/ssl/private/dhparams.pem"}

# Secure Cipher List recommended Ivan Ristic in Bulletproof SSL and TLS
SECURE_CIPHER_LIST="ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256"

# Compatible Cipher List recommended for older clients - reduced security score
COMPATIBLE_CIPHER_LIST="ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA"

APACHE_SSL_PARAMS="SSLProtocol SSLHonorCipherOrder SSLCompression SSLCipherSuite SSLCertificateFile SSLCertificateKeyFile"
NGINX_SSL_PARAMS="ssl_protocols ssl_prefer_server_ciphers ssl_ciphers ssl_certificate ssl_certificate_key ssl_session_timeout ssl_session_cache"

fatal() {
    echo "fatal: $@" 1>&2
    exit 1
}

remove_ssl_params() {
  # Remove extra ssl params from .conf files
  CONF="$1"
  if [ -f $CONF ]; then
    SSL_PARAMS="SSLProtocol SSLHonorCipherOrder SSLCompression SSLCipherSuite SSLCertificateFile SSLCertificateKeyFile"
    for p in $SSL_PARAMS; do
      sed -i "/^\s*$p/ d" $CONF
    done
  fi
}

# Configure Apache security
# apache2 (virtualhosts need to be configured to enable SSL/TLS)

# Is Apache installed?
if [ -d "/etc/apache2" ]; then

  CONF="/etc/apache2/mods-available/ssl.conf"
  if [ -f $CONF ]; then
    # Replace SSLCipherSuite
    sed -i "s|^\(\s*SSLCipherSuite\s\+\).*$|\1$SECURE_CIPHER_LIST|g" $CONF    

    # Enable honor cipher order
    sed -i "s|^\(\s*SSLHonorCipherOrder\s\+\).*$|\1on|g" $CONF    

    # Enable only secure protocols
    sed -i "s|^\(\s*SSLProtocol\s\+\).*$|\1all -SSLv2 -SSLv3|g" $CONF    

    # Disable ssl compression
    # Add default certificate and key files
    sed -i '/^\s*SSLProtocol/ a \
\
#   Disable ssl compression\
SSLCompression off\
\
#   Default certificate file\
SSLCertificateFile '"$CERTFILE"'\
\
#   Default key file\
# uncomment if using turnkey-make-ssl-cert
#SSLCertificateKeyFile '"$KEYFILE"'
'   $CONF
  else
    fatal "No ssl.conf available"	# Bailout without changing anything
  fi

  CONF="/etc/apache2/conf-available/security.conf"
  if [ -f $CONF ]; then
    # Set apache production security
    sed -i "s|^ServerTokens.*|ServerTokens Prod|" $CONF
    sed -i "s|^ServerSignature.*|ServerSignature Off|" $CONF

    # Disable HTTP compression when using SSL to protect against BREACH
    sed -i '/<\/Directory>/ a \
\
# Disable HTTP compression when using SSL to protect against BREACH\
<Location />\
  SetEnvIfExpr "%{HTTPS} == '"'"'on'"'"'" no-gzip\
</Location>
    ' $CONF
  else
    fatal "No security.conf available"	# Bailout without changing anything
  fi

  # Remove SSL params from all apache.conf
  find /etc -name "apache.conf" | while read conf; do remove_ssl_params "$conf" "$APACHE_SSL_PARAMS"; done

  # Remove SSL params from all sites-available
  for conf in /etc/apache2/sites-available/*; do remove_ssl_params "$conf" "$APACHE_SSL_PARAMS"; done

  a2enmod ssl
  a2enconf security
fi

# Configure nginx security

if [ -d '/etc/nginx' ]; then
  CONF="/etc/nginx/include/ssl"
  if [ -f $CONF ]; then
    sed -i "\
      s|^\(\s\*ssl_ciphers\s\+\).*$|\1${SECURE_CIPHER_LIST};|g;\
      s|^\(\s\*ssl_prefer_server_ciphers\s\+\).*$|\1on;|g;\
      s|^\(\s\*ssl_protocols\s\+\).*$|\1TLSv1 TLSv1.1 TLSv1.2;|g;\
      s|^\(\s\*ssl_session_timeout\s\+\).*$|\110m;|g;\
      s|^\(\s\*ssl_session_cache\s\+\).*$|\1shared:SSL:50m;|g;\
      s|^\(\s\*ssl_certificate_key\s\+\).*$|\1${KEYFILE};|g;\
      s|^\(\s\*ssl_certificate\s\+\).*$|\1${CERTFILE};|g;\
    " $CONF

    # Additional settings
    cat << EOF >> $CONF

ssl_dhparam ${DHPARAMS};
add_header X-Content-Type-Options nosniff;

server_tokens off;
EOF

    # Do not enable SSL everywhere
    sed -i '/ssl\s\+/ d' $CONF

    # Include in nginx.conf by default
    ln -sf $CONF /etc/nginx/conf.d/ssl.conf
  else
    fatal "No ssl conf file available"
  fi

  find /etc -name 'nginx.conf' | while read conf; do remove_ssl_params "$conf" "$NGINX_SSL_PARAMS"; done

  for conf in /etc/nginx/sites-available/*; do remove_ssl_params "$conf" "$NGINX_SSL_PARAMS"; done

fi

# Configure lighttpd security

secure_lighttpd() {
  CONF="$1"
  if [ -f $CONF ]; then
    # Remove ssl params to prevent duplicates
    SSL_PARAMS="ssl.use-sslv2 ssl.use-sslv3 ssl.use-compression ssl.honor-cipher-order ssl.dh-file ssl.ec-curve"
    for p in $SSL_PARAMS; do
      sed -i "/^\s*$p/ d" $CONF
    done

    # Replace ssl.pemfile
    sed -i "s|^\(\s*ssl.pemfile\s*=\s*\).*$|\1\"$CERTFILE\"|g" $CONF    
    
    # Replace ssl.cipher-list
    sed -i "s|^\(\s*ssl.cipher-list\s*=\s*\).*$|\1\"$SECURE_CIPHER_LIST\"|g" $CONF    

    # Insert additional params
    sed -i '/^\s*ssl.cipher-list/ a \
    ssl.use-sslv2 = "disable"\
    ssl.use-sslv3 = "disable"\
    ssl.dh-file = '"\"$DHPARAMS\""'\
    ssl.ec-curve = "secp384r1"\
    ssl.use-compression = "disable"\
    ssl.honor-cipher-order = "enable"
  ' $CONF
  fi
}

# Find and secure all lighttpd.conf files

# Is lighty installed?
if [ -d "/etc/lighttpd" ]; then
  CONF="/etc/lighttpd/lighttpd.conf"
  if [ -f $CONF ]; then

    secure_lighttpd $CONF
  fi

  lighty-enable-mod ssl
fi

# Secure stunnel
# check and set options in stunnel.conf
# TODO: Handle non-options properly i.e. cert, key, renegotation, ciphers
set_option() {
# syntax: set_option option value file description

  COM=";"	# comment delimiter
  SEP="="	# value separator

  # check if option value is already set
  if [[ $(grep -c "^\s*$1\s*$SEP\s*$2" $3) = 0 ]]; then  # not found

    # check if option value is commented
    if [[ $(grep -c "^\s*$COM\s*$1\s*$SEP\s*$2" $3) > 0 ]]; then
      # remove the comment
      sed -ri "s|^\s*$COM\s*\($1\)\(\s*$SEP\s*\)\($2\)\(.*$\)|\1\2\3\4|" $3
    else
      # append the description and option value
      echo "" >> $3  # start with new line
      [[ "$4" != "" ]] && echo "$COM $4" >> $3
      echo "$1 $SEP $2" >> $3
    fi
  fi
}

# Is stunnel installed?
if [ -d "/etc/stunnel" ]; then
  CONF="/etc/stunnel/stunnel.conf"

  # set options
  set_option cert "$CERTFILE" $CONF
# uncomment if using turnkey-make-ssl-cert
#  set_option key "$KEYFILE"   $CONF
  set_option options NO_SSLv2 $CONF
  set_option options NO_SSLv3 $CONF
  set_option options CIPHER_SERVER_PREFERENCE $CONF
  set_option renegotiation no $CONF
  set_option ciphers "$SECURE_CIPHER_LIST" $CONF

fi

# Secure webmin
if [ -d "/etc/webmin" ]; then

  CONF="/etc/webmin/miniserv.conf"
  if [ -f $CONF ]; then
    sed -i "s|^keyfile=.*|keyfile=$CERTFILE|" $CONF
    rm -f /etc/webmin/miniserv.pem
  fi

  # patch webmin - set cookie httpOnly
  CGI=/usr/share/webmin/session_login.cgi
  if [ -f $CGI ]; then
    sed -i "/Set-Cookie/ s/sec/sec; httpOnly/g" $CGI
  fi
fi

# vim: syntax=bash ts=2 sw=2 sts=2 sr noet
